#!/bin/dash
#pushy-commit
#This script creates a commit, which is a snapshot of the staged changes. Users can opt to automatically stage all indexed files before committing with the -a option. The script checks if there are any changes to commit by comparing the index with the last commit, if it exists. If there are changes, it increments the commit number, copies the staged files into a new commit directory within .pushy/commits, and logs the commit message along with its number in .pushy/commit-log.txt. If no changes are detected, it informs the user that there's "nothing to commit."
#==================================================================================================================================================

# Test for correct arguments
if [ "$#" -eq 3 ] && [ "$1" = "-a" ] && [ "$2" = "-m" ]; then
    commit_type="Add_commit"
    message="$3"
elif [ "$#" -eq 2 ] && [ "$1" = "-m" ]; then
    commit_type="standard_commit"
    message="$2"
else
    echo 1>&2 "usage: pushy-commit [-a] -m commit-message"
    exit 3
fi

# Check commit type and execute accordingly
if [ "$commit_type" = "Add_commit" ]; then
    # Update all files in Index
    index_files=$(find .pushy/index -type f | cut -d '/' -f 4)
    for file in $index_files; do
        ./pushy-add "$file"
    done
fi

# Check if index is empty
if [ -z "$(ls -A .pushy/index)" ]; then
    echo "nothing to commit"
    exit 1
fi

# Determine next commit number
suffix=0
while [ -d ".pushy/commits/commit.$suffix" ]; do
    suffix=$((suffix + 1))
done

# Prepare commit directories
dir1=".pushy/index"
dir2=".pushy/commits/commit.$((suffix - 1))"
all_same=1 # Assume true initially

if [ "$suffix" -gt 0 ]; then
    for file_path in $(find "$dir1" -type f); do
        file=$(basename "$file_path")
        if [ ! -f "$dir2/$file" ] || ! diff -q "$dir1/$file" "$dir2/$file" >/dev/null 2>&1; then
            all_same=0 # False, files have changed or new file exists
            break
        fi
    done
else
    all_same=0 # If it's the first commit, proceed as there are files to commit
fi

if [ "$all_same" -eq 1 ]; then
    echo "nothing to commit"
    exit 2
fi

# Proceed with creating a new commit
mkdir -p ".pushy/commits/commit.$suffix"
cp .pushy/index/* ".pushy/commits/commit.$suffix/"
echo "$suffix $message" >> .pushy/commit-log.txt
echo "Committed as commit $suffix"
exit 0


